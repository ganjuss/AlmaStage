/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.db.model.impl;

import com.db.model.user_contact;
import com.db.model.user_contactModel;
import com.db.model.user_contactSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the user_contact service. Represents a row in the &quot;c_user_contact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.db.model.user_contactModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link user_contactImpl}.
 * </p>
 *
 * @author ganjuss
 * @see user_contactImpl
 * @see com.db.model.user_contact
 * @see com.db.model.user_contactModel
 * @generated
 */
@JSON(strict = true)
public class user_contactModelImpl extends BaseModelImpl<user_contact>
	implements user_contactModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user_contact model instance should use the {@link com.db.model.user_contact} interface instead.
	 */
	public static final String TABLE_NAME = "c_user_contact";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cid", Types.BIGINT },
			{ "profile_id", Types.BIGINT },
			{ "user_id", Types.BIGINT },
			{ "email", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "dob", Types.TIMESTAMP },
			{ "city", Types.VARCHAR },
			{ "gender", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table c_user_contact (cid LONG not null primary key,profile_id LONG,user_id LONG,email VARCHAR(75) null,phone VARCHAR(75) null,dob DATE null,city VARCHAR(75) null,gender VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table c_user_contact";
	public static final String ORDER_BY_JPQL = " ORDER BY user_contact.cid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY c_user_contact.cid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.db.model.user_contact"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.db.model.user_contact"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static user_contact toModel(user_contactSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		user_contact model = new user_contactImpl();

		model.setCid(soapModel.getCid());
		model.setProfile_id(soapModel.getProfile_id());
		model.setUser_id(soapModel.getUser_id());
		model.setEmail(soapModel.getEmail());
		model.setPhone(soapModel.getPhone());
		model.setDob(soapModel.getDob());
		model.setCity(soapModel.getCity());
		model.setGender(soapModel.getGender());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<user_contact> toModels(user_contactSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<user_contact> models = new ArrayList<user_contact>(soapModels.length);

		for (user_contactSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.db.model.user_contact"));

	public user_contactModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return user_contact.class;
	}

	@Override
	public String getModelClassName() {
		return user_contact.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cid", getCid());
		attributes.put("profile_id", getProfile_id());
		attributes.put("user_id", getUser_id());
		attributes.put("email", getEmail());
		attributes.put("phone", getPhone());
		attributes.put("dob", getDob());
		attributes.put("city", getCity());
		attributes.put("gender", getGender());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cid = (Long)attributes.get("cid");

		if (cid != null) {
			setCid(cid);
		}

		Long profile_id = (Long)attributes.get("profile_id");

		if (profile_id != null) {
			setProfile_id(profile_id);
		}

		Long user_id = (Long)attributes.get("user_id");

		if (user_id != null) {
			setUser_id(user_id);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		Date dob = (Date)attributes.get("dob");

		if (dob != null) {
			setDob(dob);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}
	}

	@JSON
	@Override
	public long getCid() {
		return _cid;
	}

	@Override
	public void setCid(long cid) {
		_cid = cid;
	}

	@JSON
	@Override
	public long getProfile_id() {
		return _profile_id;
	}

	@Override
	public void setProfile_id(long profile_id) {
		_profile_id = profile_id;
	}

	@JSON
	@Override
	public long getUser_id() {
		return _user_id;
	}

	@Override
	public void setUser_id(long user_id) {
		_user_id = user_id;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public Date getDob() {
		return _dob;
	}

	@Override
	public void setDob(Date dob) {
		_dob = dob;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			user_contact.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public user_contact toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (user_contact)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		user_contactImpl user_contactImpl = new user_contactImpl();

		user_contactImpl.setCid(getCid());
		user_contactImpl.setProfile_id(getProfile_id());
		user_contactImpl.setUser_id(getUser_id());
		user_contactImpl.setEmail(getEmail());
		user_contactImpl.setPhone(getPhone());
		user_contactImpl.setDob(getDob());
		user_contactImpl.setCity(getCity());
		user_contactImpl.setGender(getGender());

		user_contactImpl.resetOriginalValues();

		return user_contactImpl;
	}

	@Override
	public int compareTo(user_contact user_contact) {
		long primaryKey = user_contact.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof user_contact)) {
			return false;
		}

		user_contact user_contact = (user_contact)obj;

		long primaryKey = user_contact.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<user_contact> toCacheModel() {
		user_contactCacheModel user_contactCacheModel = new user_contactCacheModel();

		user_contactCacheModel.cid = getCid();

		user_contactCacheModel.profile_id = getProfile_id();

		user_contactCacheModel.user_id = getUser_id();

		user_contactCacheModel.email = getEmail();

		String email = user_contactCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			user_contactCacheModel.email = null;
		}

		user_contactCacheModel.phone = getPhone();

		String phone = user_contactCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			user_contactCacheModel.phone = null;
		}

		Date dob = getDob();

		if (dob != null) {
			user_contactCacheModel.dob = dob.getTime();
		}
		else {
			user_contactCacheModel.dob = Long.MIN_VALUE;
		}

		user_contactCacheModel.city = getCity();

		String city = user_contactCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			user_contactCacheModel.city = null;
		}

		user_contactCacheModel.gender = getGender();

		String gender = user_contactCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			user_contactCacheModel.gender = null;
		}

		return user_contactCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{cid=");
		sb.append(getCid());
		sb.append(", profile_id=");
		sb.append(getProfile_id());
		sb.append(", user_id=");
		sb.append(getUser_id());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", dob=");
		sb.append(getDob());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.db.model.user_contact");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cid</column-name><column-value><![CDATA[");
		sb.append(getCid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profile_id</column-name><column-value><![CDATA[");
		sb.append(getProfile_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>user_id</column-name><column-value><![CDATA[");
		sb.append(getUser_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dob</column-name><column-value><![CDATA[");
		sb.append(getDob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = user_contact.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			user_contact.class
		};
	private long _cid;
	private long _profile_id;
	private long _user_id;
	private String _email;
	private String _phone;
	private Date _dob;
	private String _city;
	private String _gender;
	private user_contact _escapedModel;
}