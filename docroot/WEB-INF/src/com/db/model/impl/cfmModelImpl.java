/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.db.model.impl;

import com.db.model.cfm;
import com.db.model.cfmModel;
import com.db.model.cfmSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the cfm service. Represents a row in the &quot;c_cfm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.db.model.cfmModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link cfmImpl}.
 * </p>
 *
 * @author ganjuss
 * @see cfmImpl
 * @see com.db.model.cfm
 * @see com.db.model.cfmModel
 * @generated
 */
@JSON(strict = true)
public class cfmModelImpl extends BaseModelImpl<cfm> implements cfmModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cfm model instance should use the {@link com.db.model.cfm} interface instead.
	 */
	public static final String TABLE_NAME = "c_cfm";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cid", Types.BIGINT },
			{ "cfm_by", Types.BIGINT },
			{ "cfm_to", Types.BIGINT },
			{ "cfm_type_id", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table c_cfm (cid LONG not null primary key,cfm_by LONG,cfm_to LONG,cfm_type_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table c_cfm";
	public static final String ORDER_BY_JPQL = " ORDER BY cfm.cid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY c_cfm.cid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.db.model.cfm"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.db.model.cfm"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static cfm toModel(cfmSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		cfm model = new cfmImpl();

		model.setCid(soapModel.getCid());
		model.setCfm_by(soapModel.getCfm_by());
		model.setCfm_to(soapModel.getCfm_to());
		model.setCfm_type_id(soapModel.getCfm_type_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<cfm> toModels(cfmSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<cfm> models = new ArrayList<cfm>(soapModels.length);

		for (cfmSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.db.model.cfm"));

	public cfmModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return cfm.class;
	}

	@Override
	public String getModelClassName() {
		return cfm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cid", getCid());
		attributes.put("cfm_by", getCfm_by());
		attributes.put("cfm_to", getCfm_to());
		attributes.put("cfm_type_id", getCfm_type_id());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cid = (Long)attributes.get("cid");

		if (cid != null) {
			setCid(cid);
		}

		Long cfm_by = (Long)attributes.get("cfm_by");

		if (cfm_by != null) {
			setCfm_by(cfm_by);
		}

		Long cfm_to = (Long)attributes.get("cfm_to");

		if (cfm_to != null) {
			setCfm_to(cfm_to);
		}

		Long cfm_type_id = (Long)attributes.get("cfm_type_id");

		if (cfm_type_id != null) {
			setCfm_type_id(cfm_type_id);
		}
	}

	@JSON
	@Override
	public long getCid() {
		return _cid;
	}

	@Override
	public void setCid(long cid) {
		_cid = cid;
	}

	@JSON
	@Override
	public long getCfm_by() {
		return _cfm_by;
	}

	@Override
	public void setCfm_by(long cfm_by) {
		_cfm_by = cfm_by;
	}

	@JSON
	@Override
	public long getCfm_to() {
		return _cfm_to;
	}

	@Override
	public void setCfm_to(long cfm_to) {
		_cfm_to = cfm_to;
	}

	@JSON
	@Override
	public long getCfm_type_id() {
		return _cfm_type_id;
	}

	@Override
	public void setCfm_type_id(long cfm_type_id) {
		_cfm_type_id = cfm_type_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			cfm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public cfm toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (cfm)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		cfmImpl cfmImpl = new cfmImpl();

		cfmImpl.setCid(getCid());
		cfmImpl.setCfm_by(getCfm_by());
		cfmImpl.setCfm_to(getCfm_to());
		cfmImpl.setCfm_type_id(getCfm_type_id());

		cfmImpl.resetOriginalValues();

		return cfmImpl;
	}

	@Override
	public int compareTo(cfm cfm) {
		long primaryKey = cfm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof cfm)) {
			return false;
		}

		cfm cfm = (cfm)obj;

		long primaryKey = cfm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<cfm> toCacheModel() {
		cfmCacheModel cfmCacheModel = new cfmCacheModel();

		cfmCacheModel.cid = getCid();

		cfmCacheModel.cfm_by = getCfm_by();

		cfmCacheModel.cfm_to = getCfm_to();

		cfmCacheModel.cfm_type_id = getCfm_type_id();

		return cfmCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{cid=");
		sb.append(getCid());
		sb.append(", cfm_by=");
		sb.append(getCfm_by());
		sb.append(", cfm_to=");
		sb.append(getCfm_to());
		sb.append(", cfm_type_id=");
		sb.append(getCfm_type_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.db.model.cfm");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cid</column-name><column-value><![CDATA[");
		sb.append(getCid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cfm_by</column-name><column-value><![CDATA[");
		sb.append(getCfm_by());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cfm_to</column-name><column-value><![CDATA[");
		sb.append(getCfm_to());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cfm_type_id</column-name><column-value><![CDATA[");
		sb.append(getCfm_type_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = cfm.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { cfm.class };
	private long _cid;
	private long _cfm_by;
	private long _cfm_to;
	private long _cfm_type_id;
	private cfm _escapedModel;
}