/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.db.model.impl;

import com.db.model.media_links;
import com.db.model.media_linksModel;
import com.db.model.media_linksSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the media_links service. Represents a row in the &quot;c_media_links&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.db.model.media_linksModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link media_linksImpl}.
 * </p>
 *
 * @author ganjuss
 * @see media_linksImpl
 * @see com.db.model.media_links
 * @see com.db.model.media_linksModel
 * @generated
 */
@JSON(strict = true)
public class media_linksModelImpl extends BaseModelImpl<media_links>
	implements media_linksModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a media_links model instance should use the {@link com.db.model.media_links} interface instead.
	 */
	public static final String TABLE_NAME = "c_media_links";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cid", Types.BIGINT },
			{ "profile_id", Types.BIGINT },
			{ "media_type_id", Types.BIGINT },
			{ "link", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table c_media_links (cid LONG not null primary key,profile_id LONG,media_type_id LONG,link VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table c_media_links";
	public static final String ORDER_BY_JPQL = " ORDER BY media_links.cid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY c_media_links.cid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.db.model.media_links"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.db.model.media_links"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static media_links toModel(media_linksSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		media_links model = new media_linksImpl();

		model.setCid(soapModel.getCid());
		model.setProfile_id(soapModel.getProfile_id());
		model.setMedia_type_id(soapModel.getMedia_type_id());
		model.setLink(soapModel.getLink());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<media_links> toModels(media_linksSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<media_links> models = new ArrayList<media_links>(soapModels.length);

		for (media_linksSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.db.model.media_links"));

	public media_linksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return media_links.class;
	}

	@Override
	public String getModelClassName() {
		return media_links.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cid", getCid());
		attributes.put("profile_id", getProfile_id());
		attributes.put("media_type_id", getMedia_type_id());
		attributes.put("link", getLink());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cid = (Long)attributes.get("cid");

		if (cid != null) {
			setCid(cid);
		}

		Long profile_id = (Long)attributes.get("profile_id");

		if (profile_id != null) {
			setProfile_id(profile_id);
		}

		Long media_type_id = (Long)attributes.get("media_type_id");

		if (media_type_id != null) {
			setMedia_type_id(media_type_id);
		}

		String link = (String)attributes.get("link");

		if (link != null) {
			setLink(link);
		}
	}

	@JSON
	@Override
	public long getCid() {
		return _cid;
	}

	@Override
	public void setCid(long cid) {
		_cid = cid;
	}

	@JSON
	@Override
	public long getProfile_id() {
		return _profile_id;
	}

	@Override
	public void setProfile_id(long profile_id) {
		_profile_id = profile_id;
	}

	@JSON
	@Override
	public long getMedia_type_id() {
		return _media_type_id;
	}

	@Override
	public void setMedia_type_id(long media_type_id) {
		_media_type_id = media_type_id;
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return StringPool.BLANK;
		}
		else {
			return _link;
		}
	}

	@Override
	public void setLink(String link) {
		_link = link;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			media_links.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public media_links toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (media_links)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		media_linksImpl media_linksImpl = new media_linksImpl();

		media_linksImpl.setCid(getCid());
		media_linksImpl.setProfile_id(getProfile_id());
		media_linksImpl.setMedia_type_id(getMedia_type_id());
		media_linksImpl.setLink(getLink());

		media_linksImpl.resetOriginalValues();

		return media_linksImpl;
	}

	@Override
	public int compareTo(media_links media_links) {
		long primaryKey = media_links.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof media_links)) {
			return false;
		}

		media_links media_links = (media_links)obj;

		long primaryKey = media_links.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<media_links> toCacheModel() {
		media_linksCacheModel media_linksCacheModel = new media_linksCacheModel();

		media_linksCacheModel.cid = getCid();

		media_linksCacheModel.profile_id = getProfile_id();

		media_linksCacheModel.media_type_id = getMedia_type_id();

		media_linksCacheModel.link = getLink();

		String link = media_linksCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			media_linksCacheModel.link = null;
		}

		return media_linksCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{cid=");
		sb.append(getCid());
		sb.append(", profile_id=");
		sb.append(getProfile_id());
		sb.append(", media_type_id=");
		sb.append(getMedia_type_id());
		sb.append(", link=");
		sb.append(getLink());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.db.model.media_links");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cid</column-name><column-value><![CDATA[");
		sb.append(getCid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profile_id</column-name><column-value><![CDATA[");
		sb.append(getProfile_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>media_type_id</column-name><column-value><![CDATA[");
		sb.append(getMedia_type_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>link</column-name><column-value><![CDATA[");
		sb.append(getLink());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = media_links.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			media_links.class
		};
	private long _cid;
	private long _profile_id;
	private long _media_type_id;
	private String _link;
	private media_links _escapedModel;
}